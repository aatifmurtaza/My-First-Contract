// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

// Import the Ownable contract from OpenZeppelin to manage ownership
import "@openzeppelin/contracts/access/Ownable.sol";

// ProofOfIdentity contract to verify the identity of users
contract ProofOfIdentity is Ownable {
    mapping(address => bool) public isVerified;

    // Function to verify the identity of a user
    function verifyIdentity(address user) external onlyOwner {
        isVerified[user] = true;
    }

    // Function to revoke the identity verification of a user
    function revokeIdentity(address user) external onlyOwner {
        isVerified[user] = false;
    }
}

// HealthcareRecords smart contract to manage access to healthcare records
contract HealthcareRecords is Ownable {
    // ProofOfIdentity contract instance
    ProofOfIdentity public proofOfIdentity;

    // Mapping to store patient records
    mapping(address => string) private patientRecords;

    // Event to log access to patient records
    event AccessGranted(address indexed patient, address indexed healthcareProvider);

    // Modifier to ensure that only verified users can access records
    modifier onlyVerifiedUser() {
        require(proofOfIdentity.isVerified(msg.sender), "User is not verified");
        _;
    }

    // Constructor to set the ProofOfIdentity contract
    constructor(address proofOfIdentityAddress) {
        proofOfIdentity = ProofOfIdentity(proofOfIdentityAddress);
    }

    // Function for patients to grant access to their records
    function grantAccess(address healthcareProvider) external onlyVerifiedUser {
        patientRecords[msg.sender] = "EncryptedHealthRecords"; // Replace with actual record encryption logic
        emit AccessGranted(msg.sender, healthcareProvider);
    }

    // Function for healthcare providers to access patient records
    function accessRecord(address patient) external onlyVerifiedUser {
        require(bytes(patientRecords[patient]).length > 0, "No records available");
        // Implement logic to provide access to the healthcare provider
    }
}
